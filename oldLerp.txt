auto point = Math::Vector2(x, y);
        float AP = Math::Vector2(point - Math::Vector2(v1.pos.x, v1.pos.y)).Magnitude();
        float BP = Math::Vector2(point - Math::Vector2(v2.pos.x, v2.pos.y)).Magnitude();
        float CP = Math::Vector2(point - Math::Vector2(v3.pos.x, v3.pos.y)).Magnitude();
        float area = Rasterizer::AreaOfTriangle(AP, BP, vec.x) + Rasterizer::AreaOfTriangle(BP, CP, vec.y) + Rasterizer::AreaOfTriangle(AP, CP, vec.z);
        if (area <= totalArea + 0.5f && area >= totalArea - 0.5f)
        {
            auto c1 = v1.GetColorAsVector3() * (1 - (AP / std::max(vec.x, vec.z)));
            auto c2 = v2.GetColorAsVector3() * (1 - (BP / std::max(vec.x, vec.y)));
            auto c3 = v3.GetColorAsVector3() * (1 - (CP / std::max(vec.y, vec.z)));
            auto color = c1 + c2 + c3;
            Color c = { (unsigned char)std::min(color.x, 255.f), (unsigned char)std::min(color.y, 255.f), (unsigned char)std::min(color.z, 255.f), 255 };
            verticies.push_back(Vertex({ x, y }, c));
        }